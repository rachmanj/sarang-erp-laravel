<?php

namespace App\Services;

use App\Models\PurchaseOrder;
use App\Models\GoodsReceiptPO;
use App\Models\GoodsReceiptPOLine;
use App\Services\DocumentNumberingService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class GRPOCopyService
{
    public function __construct(
        private DocumentNumberingService $documentNumberingService
    ) {}

    /**
     * Copy Purchase Order to GRPO with selective line copying
     */
    public function copyFromPurchaseOrder(PurchaseOrder $po, array $selectedLines = null): GoodsReceiptPO
    {
        // Validate PO type
        if ($po->order_type !== 'item') {
            throw new \Exception('Only Item Purchase Orders can be copied to GRPO');
        }

        // Validate PO status
        if ($po->status !== 'approved') {
            throw new \Exception('Purchase Order must be approved before copying to GRPO');
        }

        return DB::transaction(function () use ($po, $selectedLines) {
            // Create GRPO with copied data
            $grpo = GoodsReceiptPO::create([
                'grn_no' => null, // Will be generated by DocumentNumberingService
                'date' => now()->toDateString(),
                'business_partner_id' => $po->business_partner_id,
                'purchase_order_id' => $po->id,
                'source_po_id' => $po->id,
                'source_type' => 'copy',
                'description' => 'Copied from PO: ' . $po->order_no,
                'status' => 'draft',
                'total_amount' => 0,
            ]);

            // Generate GRPO number (different prefix)
            $grpoNo = $this->documentNumberingService->generateNumber('grpo', $grpo->date);
            $grpo->update(['grn_no' => $grpoNo]);

            // Copy selected lines or all lines
            $linesToCopy = $selectedLines ?
                $po->lines()->whereIn('id', $selectedLines)->get() :
                $po->lines;

            $totalAmount = 0;
            foreach ($linesToCopy as $line) {
                // Validate line item type
                if ($line->inventoryItem && $line->inventoryItem->item_type !== 'item') {
                    throw new \Exception('Only item-type inventory items can be copied to GRPO');
                }

                $lineAmount = $line->qty * $line->unit_price;
                $totalAmount += $lineAmount;

                GoodsReceiptPOLine::create([
                    'grpo_id' => $grpo->id,
                    'account_id' => $line->account_id,
                    'description' => $line->description,
                    'qty' => $line->qty,
                    'unit_price' => $line->unit_price,
                    'amount' => $lineAmount,
                    'tax_code_id' => $line->tax_code_id,
                ]);
            }

            // Update GRPO total amount
            $grpo->update(['total_amount' => $totalAmount]);

            return $grpo;
        });
    }

    /**
     * Get available lines for copying from Purchase Order
     */
    public function getAvailableLines(PurchaseOrder $po): array
    {
        if ($po->order_type !== 'item') {
            return [];
        }

        return $po->lines()
            ->with('inventoryItem')
            ->whereHas('inventoryItem', function ($query) {
                $query->where('item_type', 'item');
            })
            ->get()
            ->map(function ($line) {
                return [
                    'id' => $line->id,
                    'item_code' => $line->item_code,
                    'item_name' => $line->item_name,
                    'qty' => $line->qty,
                    'unit_price' => $line->unit_price,
                    'amount' => $line->amount,
                    'description' => $line->description,
                ];
            })
            ->toArray();
    }

    /**
     * Validate if Purchase Order can be copied to GRPO
     */
    public function canCopyToGRPO(PurchaseOrder $po): bool
    {
        return $po->order_type === 'item' &&
            $po->status === 'approved' &&
            $po->lines()->whereHas('inventoryItem', function ($query) {
                $query->where('item_type', 'item');
            })->exists();
    }
}
